function coef = benchmark_util(T, param, steady_state, node_number)


%% parameter setup
alpha = param.alpha;
nss = steady_state.nss;
kss = steady_state.kss;
gamma = param.gamma;
mu = param.mu;
gx = param.gx;
dss = param.dss;
beta_s = param.beta_s;
phi = param.phi;
B = param.B;

% exogenous shock
sigmat = param.sigmat;
rhot = param.rhot;



%% Upper bound and lower bound
N(1)=(nss)*0.5;  % the lower bound on n(t)
N(100)=(nss)*2;  % the upper bound on n(t)


%% exogenous shock (production shock, capital utilization shock)
theta = Shocks(T,sigmat,rhot);

%% Initialization 

kp = zeros(T+1,1); % k(t+1)
kp(1) = kss;
c = zeros(T,1); % c(t)
n = zeros(T,1); % n(t) 
u = zeros(T,1); % u(t)


coef = [log((1-nss)^(-mu)*(gx/beta_s)); 0.001; 0.001]; % initial coefficients for labor parametrization

criter  	= 1e-6;            				        % Convergence criterion
update  	= .6;            				        % Updating rate 

epsi_number = 1;
weight = 1;
[n_nodes,epsi_nodes,weight_nodes] = GH_Quadrature(node_number,epsi_number,weight') ;


%% Loop
iteration = 0; % initializing iteration count
dif = Inf;  % norm(zeta - coef)

while (dif > criter)
    up_bound  = kss * 1.5;     % Upper bound 150% of the steady state kss.
    low_bound = kss * 0.5;         % Lower bound 50% of the steady state kss.
for t = 1:T
    % Compute the time series
    % Parameterization of n(t)
    n(t) = 1- (beta_s/gx * exp(coef(1) + coef(2) *kp(t) +  coef(3) * theta(t)))^(-1/mu);
    
    n(t)=n(t)*(n(t)>=N(1))*(n(t)<=N(100))+N(1)*(n(t)<N(1))+N(100)*(n(t)>N(100)); %making n(t) not go over the bounds 
    % calculate u(t) using FOC
    u(t) = (alpha * theta(t) * kp(t)^(alpha-1) * n(t)^(1-alpha) / dss )^(1/(phi-alpha));
    %calculate c(t) using FOC
    c(t) = (B*(1-n(t))^(-mu) * (1/((1-alpha)*theta(t)*(u(t)*kp(t))^(alpha)*n(t)^(-alpha))))^(-1/gamma);
    %calculate kp using Budget constraint
    kp(t+1) = (1/gx)*((1- (dss/phi * u(t)^(phi)))*kp(t) + theta(t)*(u(t)*kp(t))^(alpha)*n(t)^(1-alpha) - c(t));

    %calculate u(t) counterpart
    if kp(t+1) > up_bound  
          kp(t+1) = up_bound; 
   elseif kp(t+1) < low_bound
          kp(t+1) = low_bound;
    end

end



%% Expectation part calculation 
% theta(t+1)
theta_p = repmat(theta.^(rhot),1,n_nodes) .* exp(sigmat * epsi_nodes)';
%k(t) and k(t+1)
k = repmat(kp(1:end-1),1,n_nodes);
kprime = repmat(kp(2:end),1,n_nodes);
%n(t+1) - parametrization
n_p = (1- (beta_s/gx .* exp(coef(1) + coef(2).* kprime +  coef(3) .* theta_p)).^(-1/mu));
%u(t+1) - FOC
u_p = (alpha .* theta_p .* kprime.^(alpha-1) .* n_p.^(1-alpha) ./ ( dss)).^(1/(phi-alpha));
% Expectation part
e = (1-n_p).^(-mu) .* (theta.* (u.* k).^(alpha).* n.^(-alpha)) ./ (theta_p.*(u_p.*kprime).^(alpha).*n_p.^(-alpha)) .*...
    ((1- (dss/phi .* u_p.^(phi))) + alpha .* theta_p .* u_p.^(alpha) .* kprime.^(alpha-1) .* n_p.^(1-alpha)) ;
e = e(1:end-1,:) *weight_nodes;

X = [ones(T-1,1), kp(1:end-2,:), theta(1:end-1,:)];
zeta = nlinfit(X,e,'object',coef);
dif = norm(coef - zeta);

if rem(iteration,100) == 0
    dif
end
if dif > criter
    coef = update*zeta + (1-update)*coef;
%else
   % fprintf("Optimal Coefficient for parametrized function is %.3f \n", coef);
end
iteration = iteration+1;

end



Z = sim_length;
theta = Shocks(Z,sigmat,rhot);
k_sim = zeros(Z+1,1);
k_sim(1,1) = kss;
n_sim = zeros(Z,1);
c_sim = zeros(Z,1);
u_sim = zeros(Z,1);
for t = 1:Z
   n_sim(t) = 1- (beta_s/gx * exp(coef(1) + coef(2) *k_sim(t) +  coef(3) * theta(t)))^(-1/mu);
   u_sim(t) = (alpha * theta(t) * k_sim(t)^(alpha-1) * n_sim(t)^(1-alpha) / dss )^(1/(phi-alpha));
   c_sim(t) = (B*(1-n_sim(t))^(-mu) * (1/((1-alpha)*theta(t)*(u_sim(t)*k_sim(t))^(alpha)*n_sim(t)^(-alpha))))^(-1/gamma);
   k_sim(t+1) = (1/gx)*((1- (dss/phi * u_sim(t)^(phi)))*k_sim(t) + theta(t)* k_sim(t)^(alpha)*n_sim(t)^(1-alpha) - c_sim(t));
   y_sim(t) = theta(t)*k_sim(t)^(alpha)*n_sim(t)^(1-alpha);
   w_sim(t) = (1-alpha)*theta(t)*k_sim(t)^(alpha)*n_sim(t)^(-alpha);
end

theta_p = repmat(theta.^(rhot),1,n_nodes) .* exp(sigmat * epsi_nodes)';
%k(t) and k(t+1)
k = repmat(k_sim(1:end-1),1,n_nodes);
kprime = repmat(k_sim(2:end),1,n_nodes);
%n(t+1) - parametrization
n_p = (1- (beta_s/gx .* exp(coef(1) + coef(2).* kprime +  coef(3) .* theta_p)).^(-1/mu));
%c(t+1) - FOC
c_p = ((B.*(1-n_p).^(-mu) ./ ((1-alpha)*theta_p.*(kprime).^(alpha).*n_p.^(-alpha))).^(-1/gamma));


%% compute residuals 
uniform_weight = ones(n_nodes,1)./n_nodes;
RBC = ((1- param.dss) .* k + theta .* k.^(param.alpha) .* n_sim.^(1-param.alpha)) ./ (c_sim + param.gx .* kprime) * uniform_weight  -  1;
REE =  (param.beta_s .* c_p.^(-param.gamma) .* ((1- param.dss) + param.alpha .* theta_p .* kprime.^(param.alpha-1) .* n_p.^(1-param.alpha)) ./ (param.gx .* c_sim.^(-param.gamma)))*weight_nodes  - 1;
RMUL = ((c_sim.^(-param.gamma) .* (1-param.alpha).*theta.*(k).^(param.alpha).*n_sim.^(-param.alpha))./ (param.B.*(1-n_sim).^(-param.mu))) * uniform_weight  -1;


max_RBC = max(log10(abs(RBC)));
mean_RBC = mean(log10(abs(RBC)));
max_REE = max(log10(abs(REE)));
mean_REE = mean(log10(abs(REE)));
max_RMUL = max(log10(abs(RMUL)));
mean_RMUL = mean(log10(abs(RMUL)));

res_table = table(max_REE,mean_REE,max_RBC,mean_RBC,max_RMUL,mean_RMUL);

k_simu = zeros(Z+1,sim_num);
k_simu(1,:) = kss;
n_simu = zeros(Z,sim_num);
c_simu = zeros(Z,sim_num);
u_simu = zeros(Z,sim_num);
y_simu = zeros(Z,sim_num);
w_simu = zeros(Z,sim_num);
i_simu = zeros(Z,sim_num);


for j= 1:sim_num
theta = Shocks(Z,sigmat,rhot);
for t = 1:Z
   n_simu(t,j) = 1- (beta_s/gx * exp(coef(1) + coef(2) *k_simu(t,j) +  coef(3) * theta(t)))^(-1/mu);
   u_simu(t,j) = (alpha * theta(t) * k_simu(t)^(alpha-1) * n_simu(t)^(1-alpha) / dss )^(1/(phi-alpha));
   c_simu(t,j) = (B*(1-n_simu(t,j))^(-mu) * (1/((1-alpha)*theta(t)*k_simu(t,j)^(alpha)*n_simu(t)^(-alpha))))^(-1/gamma);
   k_simu(t+1,j) = (1/gx)*((1- dss)*k_simu(t,j) + theta(t)*k_simu(t,j)^(alpha)*n_simu(t,j)^(1-alpha) - c_simu(t,j));
   y_simu(t,j) = theta(t)*k_simu(t)^(alpha)*n_simu(t)^(1-alpha);
   w_simu(t,j) = (1-alpha)*theta(t)*k_simu(t,j)^(alpha)*n_simu(t,j)^(-alpha);
   i_simu(t,j) = y_simu(t,j) - c_simu(t,j);
end
end




